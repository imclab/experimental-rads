#make sure this pair is in the subset of acceptable comm data
if (nrow(comms[which(comms[,1]==control),]) > 1 & nrow(comms[which(comms[,1]==experiment),]) > 1){
#Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
#Get a vector of all the abundances for each species in the control and in the experimental communities
abun_control = sort(as.numeric(comms[which(comms[,1] == control & comms[,6] != 0), 7]))
abun_exprmt = sort(as.numeric(comms[which(comms[,1] == experiment & comms[,6] != 0), 7]))
#Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(abun_control) > 4 & length(abun_exprmt) > 4 & sum(abun_control) > 29 & sum(abun_exprmt) > 29){
relcon = relabund(abun_control) #make the lengths the same!
relexp = relabund(abun_exprmt)  #make the lengths the same!
comparison_matrix = abundMerge(relcon, relexp)
#add points to the open plot window
points(comparison_matrix[,1], comparison_matrix[,2], pch = 19)
c = append(c, comparison_matrix[,1])
e = append(e, comparison_matrix[,2])
r2 = append(r2, rsquare(comparison_matrix[,1], comparison_matrix[,2]))
}}}}
sigma_r2 = rsquare(c, e)
relabun_rmse = rmse(e, c)
legend('topleft', paste('r2 = ', round(sigma_r2,3), sep = ''), bty = 'n', cex = 0.75)
sigma_r2
c
e
head(comms)
c = as.numeric()
e = as.numeric()
r2 = as.numeric()
for (iRow in 1:nrow(comps)){
control = comps[iRow,2]  #find control in pair
experiment = comps[iRow,3]  # find experiment in pair
#  taxa = as.character(comps[iRow, 4])
#  type = as.character(comps[iRow, 7])
#  refID = as.character(comps[iRow, 1])
#Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
#Get a vector of all the abundances for each species in the control and in the experimental communities
abun_control = sort(as.numeric(comms[which(comms[,2] == control & comms[,7] != 0), 8]))
abun_exprmt = sort(as.numeric(comms[which(comms[,2] == experiment & comms[,7] != 0), 8]))
#Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(abun_control) > 4 & length(abun_exprmt) > 4 & sum(abun_control) > 29 & sum(abun_exprmt) > 29){
relcon = relabund(abun_control) #make the lengths the same!
relexp = relabund(abun_exprmt)  #make the lengths the same!
comparison_matrix = abundMerge(relcon, relexp)
#add points to the open plot window
points(comparison_matrix[,1], comparison_matrix[,2], pch = 19)
c = append(c, comparison_matrix[,1])
e = append(e, comparison_matrix[,2])
r2 = append(r2, rsquare(comparison_matrix[,1], comparison_matrix[,2]))
}}}
sigma_r2 = rsquare(c, e)
relabun_rmse = rmse(e, c)
legend('topleft', paste('r2 = ', round(sigma_r2,3), sep = ''), bty = 'n', cex = 0.75)
par(mfrow=c(1,1))
plot(NA, NA, xlim = c(0,1), ylim = c(0,1), xlab = "", ylab = "", bty = "n")
abline(0, 1, lty = 2, col = 'red', lwd = 2)
c = as.numeric()
e = as.numeric()
r2 = as.numeric()
for (iRow in 1:nrow(comps)){
control = comps[iRow,2]  #find control in pair
experiment = comps[iRow,3]  # find experiment in pair
#  taxa = as.character(comps[iRow, 4])
#  type = as.character(comps[iRow, 7])
#  refID = as.character(comps[iRow, 1])
#Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
#Get a vector of all the abundances for each species in the control and in the experimental communities
abun_control = sort(as.numeric(comms[which(comms[,2] == control & comms[,7] != 0), 8]))
abun_exprmt = sort(as.numeric(comms[which(comms[,2] == experiment & comms[,7] != 0), 8]))
#Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(abun_control) > 4 & length(abun_exprmt) > 4 & sum(abun_control) > 29 & sum(abun_exprmt) > 29){
relcon = relabund(abun_control) #make the lengths the same!
relexp = relabund(abun_exprmt)  #make the lengths the same!
comparison_matrix = abundMerge(relcon, relexp)
#add points to the open plot window
points(comparison_matrix[,1], comparison_matrix[,2], pch = 19)
c = append(c, comparison_matrix[,1])
e = append(e, comparison_matrix[,2])
r2 = append(r2, rsquare(comparison_matrix[,1], comparison_matrix[,2]))
}}}
sigma_r2 = rsquare(c, e)
relabun_rmse = rmse(e, c)
legend('topleft', paste('r2 = ', round(sigma_r2,3), sep = ''), bty = 'n', cex = 0.75)
relabun_rmse
J_r2 = rsquare(Jc, Je)
J_r2
J_rmse
j_rmse
Cshape
table(Cshape)
table(Eshape)
cbind(Cshape, Eshape, cID, eID)
condat = cbind(cID, Cshape)
expdat = cbind(eID,eshape)
expdat = cbind(eID,eShape)
expdat = cbind(eID,Eshape)
head(expdat)
is.data.frame(expdat)
is.matrix(expdat)
condat = as.data.frame(condat)
expdat = as.data.frame(expdat)
merge(condat, expdat, by.x = cID, by.y = eID)
merge(condat, expdat, by.x = "cID", by.y = "eID")
dat = merge(condat, expdat, by.x = "cID", by.y = "eID")
dim(dat)
dat = merge(condat, expdat, by.x = "cID", by.y = "eID", all = TRUE)
dim(dat)
dat
table(dat$Cshape)
table(dat$Eshape)
table(Cshape)
table(Eshape)
unqiue(dat)
unique(dat)
length(cID)
length(cShape)
length(Cshape)
length(unique(cID))
range(cID)
range(eID)
IDs = c(unique(cID), unique(eID))
IDs = unique(IDs)
IDs = unique(c(unique(cID), unique(eID)))
length(IDs)
match(31,IDs)
IDs[1]
match(190,IDs)
match(191,IDs)
index = match(IDs[i], cID)
i = 1
index = match(IDs[i], cID)
index
IDs[i]
cID[1]
cShape[1]
Cshape[1]
index = match(IDs[i], eID)
index
Eshape[index]
length(Eshape)
length(Eshape[index])
shape1 = Cshape[index1]
shape2 = Cshape[index2]
index1 = match(IDs[i], cID)
index2 = match(IDs[i], eID)
shape1 = Cshape[index1]
shape2 = Cshape[index2]
index1
index2
Cshape
Cshape[1]
Cshape[index1]
shape1 = Cshape[index1]
shape1
shape2 = Cshape[index2]
shape2
index1 = match(IDs[i], cID | eID)
index1
index1 = match(IDs[i], cID & eID)
index1
index1 = match(IDs[i], c(cID, eID))
index1
i = 2
index1 = match(IDs[i], c(cID, eID))
index1
shape2 = Eshape[index1]
shape1 = Cshape[index1]
shape2
shape2
shape1
allids = c(cID, eID)
index1 = match(IDs[i], allids)
allshapes = c(Cshape, Eshape)
index = match(IDs[i], allids)
index
allids = c(cID, eID)
allshapes = c(Cshape, Eshape)
shapes = c()
i = 1
index = match(IDs[i], allids)
shape = allshapes[index]
index
match(IDs[i], allids)
length(allids)
length(allshapes)
shape = allshapes[index]
shape
allshapes
allids[21]
IDs
IDs[10]
i = 10
index = match(IDs[i], allids)
shape = allshapes[index]
shape
RAD_shapes = function (cID, eID, Cshape, Eshape){
# return the number of unique shapes for each ID
IDs = unique(c(unique(cID), unique(eID)))
allids = c(cID, eID)
allshapes = c(Cshape, Eshape)
shapes = c()
for (i in 1:length(IDs)){
index = match(IDs[i], allids)
shape = allshapes[index]
shapes = append(shapes, shape)
}
}
table(shapes)
shapes
shapes = append(shapes, shape)
shapes
IDs = unique(c(unique(cID), unique(eID)))
allids = c(cID, eID)
allshapes = c(Cshape, Eshape)
shapes = c()
for (i in 1:length(IDs)){
index = match(IDs[i], allids)
shape = allshapes[index]
shapes = append(shapes, shape)
}
count_RAD_shapes = function (cID, eID, Cshape, Eshape){
# return the number of unique shapes for each ID
IDs = unique(c(unique(cID), unique(eID)))
allids = c(cID, eID)
allshapes = c(Cshape, Eshape)
shapes = c()
for (i in 1:length(IDs)){
index = match(IDs[i], allids)
shape = allshapes[index]
shapes = append(shapes, shape)
}
nums = table(shapes)
return nums
}
count_RAD_shapes = function (cID, eID, Cshape, Eshape){
# return the number of unique shapes for each ID
IDs = unique(c(unique(cID), unique(eID)))
allids = c(cID, eID)
allshapes = c(Cshape, Eshape)
shapes = c()
for (i in 1:length(IDs)){
index = match(IDs[i], allids)
shape = allshapes[index]
shapes = append(shapes, shape)
}
nums = table(shapes)
return (nums)
}
count_RAD_shapes(cID, eID, Cshape, Eshape)
print(count_RAD_shapes(cID, eID, Cshape, Eshape))
150 + 7 + 24
lm_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
r2_full = summary.lm(lm_full)$r.squared
lm_comp = lm(stdz_bc_rad ~ stdz_bc_comp)
r2_comp = summary.lm(lm_comp)$r.squared
lm_sn = lm(stdz_bc_rad ~ stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
r2_sn = summary.lm(lm_sn)$r.squared
r2_full
r2_comp
r2_sn
lm_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_perc_s + stdz_perc_n + stdz_perc_s:stdz_perc_n)
r2_full = summary.lm(lm_full)$r.squared
lm_comp = lm(stdz_bc_rad ~ stdz_bc_comp)
r2_comp = summary.lm(lm_comp)$r.squared
lm_perc_sn = lm(stdz_bc_rad ~ stdz_perc_s + stdz_perc_n + stdz_perc_n:stdz_perc_s)
r2_perc_sn = summary.lm(lm_perc_sn)$r.squared
r2_full
r2_comp
r2_perc_sn
#descriptive variables
refID = c()
cID = c()
eID = c()
Cshape = c()
Eshape = c()
CS = as.numeric()
CN = as.numeric()
Jc = as.numeric()
ES = as.numeric()
EN = as.numeric()
Je = as.numeric()
taxon = c()
etype = c()
# comparison variables
BCrad = as.numeric()
BCS = as.numeric()
BCN = as.numeric()
BCcomp = as.numeric()
percS = as.numeric()
percN = as.numeric()
for (iRow in 1:nrow(comps)){
control = comps[iRow,2]  #find control in pair
experiment = comps[iRow,3]  # find experiment in pair
taxa = as.character(expers[which(expers[,2]==control),7])# find taxonomic group from experiments table
type = as.character(expers[which(expers[,2]==control),4]) # find experiment type from experiments table
ref = as.character(comps[iRow,1])
# Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
a1 = sort(as.numeric(comms[which(comms[,2] == control & comms[,7] != 0), 8])) #vector of control abundances
a2 = sort(as.numeric(comms[which(comms[,2] == experiment & comms[,7] != 0), 8])) #vector of exp abundances
# Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(a1) > 4 & length(a2) > 4 & sum(a1) > 299 & sum(a2) > 299){
# find categorical shapes (logseries vs. lognormal)
if(expers[which(expers[,2]==control),10] == 1) {
d = dist.test(a1, a2)
Cshape = append(Cshape, d$con)
Eshape = append(Eshape, d$exp)
}
else {
Cshape = append(Cshape, "ERROR")
Eshape = append(Eshape, "ERROR")
}
# get summary statistics from comparisons
BCrad = append(BCrad, BCdist(abundMerge(relabund(a1), relabund(a2))))
BCS = append(BCS, BCdist(matrix(c(length(a1), length(a2)), nrow = 1, ncol = 2)))
BCN = append(BCN, BCdist(matrix(c(sum(a1),sum(a2)), nrow = 1, ncol = 2)))
BCcomp = append(BCcomp, BCdist(subset(comms[which(comms$siteID == control | comms$siteID == experiment),])))
percS = append(percS, ((length(a2) - length(a1))/(length(a1)))*100)
percN = append(percN, ((sum(a2) - sum(a1))/(sum(a1)))*100)
taxon = append(taxon, taxa)
etype = append(etype, type)
# record summary descriptive variables
refID = append(refID, ref)
cID = append(cID, control)
eID = append(eID, experiment)
CS = append(CS, length(a1))
CN = append(CN, sum(a1))
Jc = append(Jc, round(SimpE(comms[which(comms[,2] == control),]),2))
ES = append(ES, length(a2))
EN = append(EN, sum(a2))
Je = append(Je, round(SimpE(comms[which(comms[,2] == experiment),]),2))
}}}
length(cID)
unique(cID)
unique(eID)
length(unique(cID))
length(unique(eID))
intersect(cID,eID)
18+36-1
#collapse taxon types so there aren't so many factors
taxon[taxon=='carabid']<-'insect'
taxon[taxon=='lepidopteran']<- 'insect'
taxon[taxon=='odonate']<- 'insect'
taxon[taxon=='orthoptera']<-'insect'
taxon[taxon=='orthoptera ']<-'insect'
taxon[taxon=='beetle']<-'insect'
taxon[taxon=='microarthropods']<-'microarthropod'
taxon[taxon=='reptile']<-'herpetofauna'
table(taxon)
25+12
range(CS,ES)
range(CN,EN)
#### Standardize the variables
stdz_bc_rad = standardize(BCrad)
stdz_bc_s = standardize(BCS)
stdz_bc_n = standardize(BCN)
stdz_perc_s = standardize(abs(percS))
stdz_perc_n = standardize(abs(percN))
stdz_bc_comp = standardize(BCcomp)
taxon = as.factor(taxon)
etype = as.factor(etype)
# variance partitioning of variable impact on RADs, using Bray-Curtis S and N
lm_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
r2_full = summary.lm(lm_full)$r.squared
lm_comp = lm(stdz_bc_rad ~ stdz_bc_comp)
r2_comp = summary.lm(lm_comp)$r.squared
lm_sn = lm(stdz_bc_rad ~ stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
r2_sn = summary.lm(lm_sn)$r.squared
#
r2_full
r2_comp
r2_sn
# variance partitioning of variable impact on RADs, using abs % difference S and N
lm_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_perc_s + stdz_perc_n + stdz_perc_s:stdz_perc_n)
r2_full = summary.lm(lm_full)$r.squared
lm_comp = lm(stdz_bc_rad ~ stdz_bc_comp)
r2_comp = summary.lm(lm_comp)$r.squared
lm_perc_sn = lm(stdz_bc_rad ~ stdz_perc_s + stdz_perc_n + stdz_perc_n:stdz_perc_s)
r2_perc_sn = summary.lm(lm_perc_sn)$r.squared
r2_full
r2_comp
r2_perc_sn
#descriptive variables
refID = c()
cID = c()
eID = c()
Cshape = c()
Eshape = c()
CS = as.numeric()
CN = as.numeric()
Jc = as.numeric()
ES = as.numeric()
EN = as.numeric()
Je = as.numeric()
taxon = c()
etype = c()
# comparison variables
BCrad = as.numeric()
BCS = as.numeric()
BCN = as.numeric()
BCcomp = as.numeric()
percS = as.numeric()
percN = as.numeric()
for (iRow in 1:nrow(comps)){
control = comps[iRow,2]  #find control in pair
experiment = comps[iRow,3]  # find experiment in pair
taxa = as.character(expers[which(expers[,2]==control),7])# find taxonomic group from experiments table
type = as.character(expers[which(expers[,2]==control),4]) # find experiment type from experiments table
ref = as.character(comps[iRow,1])
# Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
a1 = sort(as.numeric(comms[which(comms[,2] == control & comms[,7] != 0), 8])) #vector of control abundances
a2 = sort(as.numeric(comms[which(comms[,2] == experiment & comms[,7] != 0), 8])) #vector of exp abundances
# Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(a1) > 4 & length(a2) > 4 & sum(a1) > 29 & sum(a2) > 29){
# find categorical shapes (logseries vs. lognormal)
if(expers[which(expers[,2]==control),10] == 1) {
d = dist.test(a1, a2)
Cshape = append(Cshape, d$con)
Eshape = append(Eshape, d$exp)
}
else {
Cshape = append(Cshape, "ERROR")
Eshape = append(Eshape, "ERROR")
}
# get summary statistics from comparisons
BCrad = append(BCrad, BCdist(abundMerge(relabund(a1), relabund(a2))))
BCS = append(BCS, BCdist(matrix(c(length(a1), length(a2)), nrow = 1, ncol = 2)))
BCN = append(BCN, BCdist(matrix(c(sum(a1),sum(a2)), nrow = 1, ncol = 2)))
BCcomp = append(BCcomp, BCdist(subset(comms[which(comms$siteID == control | comms$siteID == experiment),])))
percS = append(percS, ((length(a2) - length(a1))/(length(a1)))*100)
percN = append(percN, ((sum(a2) - sum(a1))/(sum(a1)))*100)
taxon = append(taxon, taxa)
etype = append(etype, type)
# record summary descriptive variables
refID = append(refID, ref)
cID = append(cID, control)
eID = append(eID, experiment)
CS = append(CS, length(a1))
CN = append(CN, sum(a1))
Jc = append(Jc, round(SimpE(comms[which(comms[,2] == control),]),2))
ES = append(ES, length(a2))
EN = append(EN, sum(a2))
Je = append(Je, round(SimpE(comms[which(comms[,2] == experiment),]),2))
}}}
#collapse taxon types so there aren't so many factors
taxon[taxon=='carabid']<-'insect'
taxon[taxon=='lepidopteran']<- 'insect'
taxon[taxon=='odonate']<- 'insect'
taxon[taxon=='orthoptera']<-'insect'
taxon[taxon=='orthoptera ']<-'insect'
taxon[taxon=='beetle']<-'insect'
taxon[taxon=='microarthropods']<-'microarthropod'
taxon[taxon=='reptile']<-'herpetofauna'
#### Standardize the variables
stdz_bc_rad = standardize(BCrad)
stdz_bc_s = standardize(BCS)
stdz_bc_n = standardize(BCN)
stdz_perc_s = standardize(abs(percS))
stdz_perc_n = standardize(abs(percN))
stdz_bc_comp = standardize(BCcomp)
taxon = as.factor(taxon)
etype = as.factor(etype)
# variance partitioning of variable impact on RADs, using Bray-Curtis S and N
lm_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
r2_full = summary.lm(lm_full)$r.squared
lm_comp = lm(stdz_bc_rad ~ stdz_bc_comp)
r2_comp = summary.lm(lm_comp)$r.squared
lm_sn = lm(stdz_bc_rad ~ stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
r2_sn = summary.lm(lm_sn)$r.squared
### variance partitioning of variable impact on RADs using Bray-Curtis S and N, composition and TAXONOMIC GROUP
lm_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n + taxon)
r2_full = summary.lm(lm_full)$r.squared
lm_comm_vars = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
r2_comm_vars = summary.lm(lm_comm_vars)$r.squared
lm_taxa = lm(stdz_bc_rad ~ taxon)
r2_taxa = summary.lm(lm_taxa)$r.squared
r2_full
r2_comm_vars
r2_taxa
lm_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n + etype)
r2_full = summary.lm(lm_full)$r.squared
lm_comm_vars = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
r2_comm_vars = summary.lm(lm_comm_vars)$r.squared
lm_etype = lm(stdz_bc_rad ~ etype)
r2_etype = summary.lm(lm_etype)$r.squared
r2_full
r2_comm_vars
r2_etype
table(etype)
### variance partitioning of variable impact on RADs, using abs % difference S and N, composition and TAXONOMIC GROUP
lm_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_perc_s + stdz_perc_n + stdz_perc_s:stdz_perc_n + taxon)
r2_full = summary.lm(lm_full)$r.squared
lm_comm_vars = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_perc_s + stdz_perc_n + stdz_perc_s:stdz_perc_n)
r2_comm_vars = summary.lm(lm_comm_vars)$r.squared
lm_taxa = lm(stdz_bc_rad ~ taxon)
r2_taxa = summary.lm(lm_taxa)$r.squared
r2_full
r2_comm_vars
r2_taxa
lm_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_perc_s + stdz_perc_n + stdz_perc_s:stdz_perc_n + etype)
r2_full = summary.lm(lm_full)$r.squared
lm_comm_vars = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_perc_s + stdz_perc_n + stdz_perc_s:stdz_perc_n)
r2_comm_vars = summary.lm(lm_comm_vars)$r.squared
lm_etype = lm(stdz_bc_rad ~ etype)
r2_etype = summary.lm(lm_etype)$r.squared
r2_full
r2_comm_vars
r2_etype
unique(comms$siteID)
length(unique(comms$siteID))
