return(decision)
}
NullCommunityN<-function(siteXspp, num){
# input paired communities in site x species matrix, run randomization test
# to determine if difference in N is > than expected by random
# randomizes the abundance of each species in the paired communities, while still assuming
# that the total number of individuals within each species was observed. Note that this may also
# change observed S for each site and/or form of abundance distribution (not analyzed here).
#count N for each comm, calculate different in N
Nboth_obs<-rowSums(siteXspp)
Tstar_obs<-Nboth_obs[[1]] - Nboth_obs[[2]] #OBSERVED: control N - manipulated N
#replicate null distribution, decide the number of randomizations n=X
nullDistribution<-replicate(n=num,expr=nullN(siteXspp))
#Find quantile of the null distribution for the observed test statistic
quant<-ecdf(nullDistribution) (Tstar_obs)
#output the quantile
if(quant > .95 | quant < .05) {decision<-"Sign."}
else { decision <- "Random"}
#if(quant < .95 & quant > .05) {decision<-"Random"}
return(decision)
}
NullCommunityS<-function(siteXspp, num){
# input paired communities in site x species matrix, run randomization test
# to determine if difference in S is > than expected by random
# randomizes the abundance of each species in the paired communities, while still assuming
# that the total number of individuals within each community was observed.
# Note that this may also change observed form of abundance distribution (not analyzed here).
#count S for each comm, calculate different in S
Sboth_obs = c(0,0)
for (row in 1:nrow(siteXspp)){
S = 0
for (col in 1:ncol(siteXspp)){
if (siteXspp[row,col] != 0){
S = S+1
}
}
Sboth_obs[row] = S
}
Tstar_obs<-Sboth_obs[[1]] - Sboth_obs[[2]] #OBSERVED: control S - manipulated S
#replicate null distribution, decide the number of randomizations n=X
nullDistribution<-replicate(n=num,expr=nullS(siteXspp))
#Find quantile of the null distribution for the observed test statistic
quant<-ecdf(nullDistribution) (Tstar_obs)
#output the quantile
if(quant > .95 | quant < .05) {decision<-"Sign."}
else { decision <- "Random"}
#if(quant < .95 & quant > .05) {decision<-"Random"}
return(decision)
}
BCnull
BCindex = BCnull=="Sign."
length(BCindex)
BCcomp[BCindex]
length(BCcomp[BCindex])
length(Sindex == T)
length(Sindex == TRUE)
Nindex = Nnull=="Sign."
Sindex = Snull=="Sign."
length(Sindex == TRUE)
length(Sindex == "TRUE")
length(CS[Sindex])
length(CN[Nindex])
cbind(Sindex, BCindex)
plot(BCcomp)
plot(BCcomp, CS)
plot(BCcomp[BCindex], CS[BCindex], pch = 19, col = "red")
points(BCcomp, CS)
out<-matrix(nrow=nrow(siteXspp),ncol=ncol(siteXspp))
#Draw new abundance distribution #FIXME
# keeps site-level N the same, but allows S to differ
totalN = rowSums(siteXspp)
for (row in 1:nrow(siteXspp)){
rowN = totalN[row]
for (col in 1:ncol(siteXspp)){
N1 = sample (0:rowN, 1)
out [row, col] = N1
rowN = rowN - N1
}}
out
siteXspp
out<-matrix(nrow=nrow(siteXspp),ncol=ncol(siteXspp))
#Draw new abundance distribution #FIXME, too many zeroes in the data
# keeps site-level N the same, but allows S to differ
totalN = rowSums(siteXspp)
for (row in 1:nrow(siteXspp)){
rowN = totalN[row]
for (col in 1:ncol(siteXspp)){
N1 = sample (1:rowN, 1)
out [row, col] = N1
rowN = rowN - N1
}}
out
siteXspp
Sboth_sim = c(0,0)
for (row in 1:nrow(out)){
S = 0
for (col in 1:ncol(out)){
if (out[row,col] != 0){
S = S+1
}
}
Sboth_sim[row] = S
}
Tstar<-Sboth_sim[[1]] - Sboth_sim[[2]]
Tstar
# keeps site-level N the same, but allows S to differ
totalN = rowSums(siteXspp)
for (row in 1:nrow(siteXspp)){
rowN = totalN[row]
for (col in 1:ncol(siteXspp)){
N1 = abs(sample (1:rowN, 1))
out [row, col] = N1
rowN = rowN - N1
}}
out
sum(out[1,])
sum(out[2,])
sum(siteXspp[1,])
sum(siteXspp[2,])
out<-matrix(nrow=nrow(siteXspp),ncol=ncol(siteXspp))
totalN = rowSums(siteXspp)
for (row in 1:nrow(siteXspp)){
rowN = totalN[row]
for (col in 1:ncol(siteXspp)){
N1 = abs(sample (1:rowN, 1))
out [row, col] = N1
rowN = rowN - N1
}}
out
sum(out[,1])
sum(out[1,])
sum(siteXspp[1,])
sum(out[2,])
help(poilogMLE)
cont_par = as.list(poilogMLE(siteXspp[1,], startVals = c(mean(log(siteXspp[1,])), sd(log(siteXspp[1,]))))$par)
cont_par = as.list(poilogMLE(siteXspp[1,], startVals = c(mean(log(siteXspp[1,])),
sd(log(siteXspp[1,])))$par)
cont_par = as.list(poilogMLE(siteXspp[1,], startVals = c(mean(log(siteXspp[1,])),
sd(log(siteXspp[1,])))$par))
siteXspp[1,]
cont_par = as.list(poilogMLE(out[1,], startVals = c(mean(log(out[1,])),
sd(log(out[1,])))$par))
dat = as.vector(siteXspp[1,])
dat
dat = as.vector(as.numeric(siteXspp[1,]))
dat
cont_par = as.list(poilogMLE(dat, startVals = c(mean(log(dat)), sd(log(dat)))$par))
is.atomic(dat)
is.numeric(dat)
log(dat)
mean(log(dat))
totalN = rowSums(siteXspp)
totalN
totalN = rowSums(siteXspp)
for (row in 1:nrow(siteXspp)){
rowN = totalN[row]
for (col in 1:ncol(siteXspp)){
N1 = abs(sample (0:rowN, 1))
out [row, col] = N1
rowN = rowN - N1
}}
out
sum(out[1,])
sum(out[2,])
totalN
for (row in 1:nrow(siteXspp)){
rowN = totalN[row]
for (col in 1:ncol(siteXspp)){
N1 = sample (0:(rowN-1), 1)
out [row, col] = N1
rowN = rowN - N1
}}
out
sum(out[,1])
sum(out[1,])
sum(out[2,])
totalN
N1 = sample (0:rowN, 2)
N1
totalN = rowSums(siteXspp)
for (row in 1:nrow(siteXspp)){
rowN = totalN[row]
for (col in 1:ncol(siteXspp)){
N1 = sample (1:rowN, 1)
if (N1<1){
N1 = sample(1:rowN, 1)
}
out [row, col] = N1
rowN = rowN - N1
}}
out
D = diversity(siteXspp, index = 'invsimpson') #leave out first column, which is siteID
D
D = diversity(siteXspp[1,], index = 'invsimpson') #leave out first column, which is siteID
D
D = diversity(siteXspp[2,], index = 'invsimpson') #leave out first column, which is siteID
D
specnumber(siteXspp)
siteXspp
specnumber(siteXspp)
Sboth_obs = specnumber(siteXspp)
Sboth_obs
Sboth_obs[[1]]
Sboth_obs[[2]]
Tstar_obs<-Sboth_obs[[1]] - Sboth_obs[[2]] #OBSERVED: control S - manipulated S
Tstar_obs
Sboth_sim = specnumber(out)
Sboth_sim
Tstar<-Sboth_sim[[1]] - Sboth_sim[[2]]
Tstar
J = D / specnumber(siteXspp)
J
Jboth = Dboth / specnumber(siteXspp)
Dboth = diversity(siteXspp, index = 'invsimpson')
Jboth = Dboth / specnumber(siteXspp)
Jboth
D
Tstar_obs<-Jboth_obs[[1]] - Jboth_obs[[2]] #OBSERVED: control S - manipulated S
m
Jboth_obs = Dboth / specnumber(siteXspp)
Tstar_obs<-Jboth_obs[[1]] - Jboth_obs[[2]] #OBSERVED: control S - manipulated S
Tstar_obs
Tstar_obs<-BCdist(matrix(c(Jboth_obs[1], Jboth_obs[2]), nrow = 1, ncol = 2)) #OBSERVED: control S - manipulated S
Tstar_obs
out<-matrix(nrow=nrow(siteXspp),ncol=ncol(siteXspp))
#Draw new abundance distribution
for (x in 1:ncol(siteXspp)){
totalN<-sum(siteXspp[,x])
N1<-sample(0:totalN,1)    #changed 0:totalN, instead of 1:totalN
N2<-totalN - N1
out[,x]<-c(N1,N2)
}
Dboth = diversity(out, index = 'invsimpson')
Jboth_obs = Dboth / specnumber(out)
Tstar_obs
Jboth_sim = Dboth / specnumber(out)
Jboth_sim
Tstar<-BCdist(matrix(c(Jboth_sim[1], Jboth_sim[2]), nrow = 1, ncol = 2)) #OBSERVED: Bray-curtis difference in Simpson's evenness (J)
Tstar
Tstar_obs
nullJ<-function(siteXspp){
# The total N (summed across both sites) remains the same, but total S observed at each site
# is allowed to differ due to the species-level randomizations. eg. some species will now be 0.
#Create an output matrix
out<-matrix(nrow=nrow(siteXspp),ncol=ncol(siteXspp))
#Draw new abundance distribution
for (x in 1:ncol(siteXspp)){
totalN<-sum(siteXspp[,x])
N1<-sample(0:totalN,1)    #changed 0:totalN, instead of 1:totalN
N2<-totalN - N1
out[,x]<-c(N1,N2)
}
#Compute difference in evenness
#calculate J for each community, and the bray-curtis dissimilarity among the simulated sites
Dboth = diversity(out, index = 'invsimpson')
Jboth_sim = Dboth / specnumber(out)
Tstar<-BCdist(matrix(c(Jboth_sim[1], Jboth_sim[2]), nrow = 1, ncol = 2)) #OBSERVED: Bray-curtis difference in Simpson's evenness (J)
return(Tstar)
}
NullCommunityJ<-function(siteXspp, num){
# input paired communities in site x species matrix, run randomization test
# to determine if difference in S is > than expected by random
# randomizes the abundance of each species in the paired communities, while still assuming
# that the total number of individuals within each community was observed.
# Note that this may also change observed form of abundance distribution (not analyzed here).
#get evenness for both communities, calculate difference in evenness
Dboth = diversity(siteXspp, index = 'invsimpson')
Jboth_obs = Dboth / specnumber(siteXspp)
Tstar_obs<-BCdist(matrix(c(Jboth_obs[1], Jboth_obs[2]), nrow = 1, ncol = 2)) #OBSERVED: Bray-curtis difference in Simpson's evenness (J)
#replicate null distribution, decide the number of randomizations n=X
nullDistribution<-replicate(n=num,expr=nullJ(siteXspp))
#Find quantile of the null distribution for the observed test statistic
quant<-ecdf(nullDistribution) (Tstar_obs)
#output the quantile
if(quant > .95 | quant < .05) {decision<-"Sign."}
else { decision <- "Random"}
#if(quant < .95 & quant > .05) {decision<-"Random"}
return(decision)
}
BCnull = c()
Nnull = c()
Snull = c()
Jnull = c()
RADnull = c()
for (iRow in 1:nrow(comps)){
control = comps[iRow,2]  #find control in pair
experiment = comps[iRow,3]  # find experiment in pair
# Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
a1 = sort(as.numeric(comms[which(comms[,2] == control & comms[,7] != 0), 8])) #vector of control abundances
a2 = sort(as.numeric(comms[which(comms[,2] == experiment & comms[,7] != 0), 8])) #vector of exp abundances
# Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(a1) > 4 & length(a2) > 4 & sum(a1) > 29 & sum(a2) > 29){
comparison = subset(comms[which(comms$siteID == control | comms$siteID == experiment),])
comparison$spname = paste(comparison$genus, comparison$species, sep="_")
comparison$grp = as.numeric(comparison$siteID==control) #control site == 1, make sure to order comparisons, control[1,], experiment[2,]
data = comparison[,c(2,8,9,10)]
sitexsp <- cast(data, grp + siteID  ~ spname, value = "abundance", fun = mean)
sitexsp[is.na(sitexsp)] <- 0
sitexsp = arrange(sitexsp, desc(grp))
BCresult = NullCommunityBC(sitexsp[,-c(1,2)], 100)
BCnull = append(BCnull, BCresult)
Nresult = NullCommunityN(sitexsp[,-c(1,2)], 100)
Nnull = append(Nnull, Nresult)
Sresult = NullCommunityS(sitexsp[,-c(1,2)], 100)
Snull = append(Snull, Sresult)
Jresult = NullCommunityJ(sitexsp[,-c(1,2)], 100)
Jnull = append(Jnull, Jresult)
}}}
#-------------------------------------------------------------
nullBCcomp<-function(siteXspp){
# The total N (summed across both sites) remains the same, but total N observed at each site
# is allowed to differ due to the species-level randomizations.
#Create an output matrix
out<-matrix(nrow=nrow(siteXspp),ncol=ncol(siteXspp))
#Draw new abundance distribution
for (x in 1:ncol(siteXspp)){
totalN<-sum(siteXspp[,x])
N1<-sample(0:totalN,1)    #changed 0:totalN, instead of 1:totalN
N2<-totalN - N1
out[,x]<-c(N1,N2)
}
#Compute difference in abundances
Tstar<- vegdist(out, method = 'bray')
return(Tstar)
}
nullN<-function(siteXspp){
# The total N (summed across both sites) remains the same, but total N observed at each site
# is allowed to differ due to the species-level randomizations.
#Create an output matrix
out<-matrix(nrow=nrow(siteXspp),ncol=ncol(siteXspp))
#Draw new abundance distribution
for (x in 1:ncol(siteXspp)){
totalN<-sum(siteXspp[,x])
N1<-sample(0:totalN,1)    #changed 0:totalN, instead of 1:totalN
N2<-totalN - N1
out[,x]<-c(N1,N2)
}
#Compute difference in abundances
Nboth<-rowSums(out)
Tstar<-Nboth[[1]] - Nboth[[2]]
return(Tstar)
}
nullS<-function(siteXspp){
# The total N (summed across both sites) remains the same, but total S observed at each site
# is allowed to differ due to the species-level randomizations. eg. some species will now be 0.
#Create an output matrix
out<-matrix(nrow=nrow(siteXspp),ncol=ncol(siteXspp))
#Draw new abundance distribution    #FIXME, too many zeroes in the data
# keeps site-level N the same, but allows S to differ
totalN = rowSums(siteXspp)
for (row in 1:nrow(siteXspp)){
rowN = totalN[row]
for (col in 1:ncol(siteXspp)){
N1 = sample (1:rowN, 1)
out [row, col] = N1
rowN = rowN - N1
}}
#Compute difference in species richness
#count S for each comm, calculate different in S
Sboth_sim = specnumber(out)
Tstar<-Sboth_sim[[1]] - Sboth_sim[[2]]
return(Tstar)
}
nullJ<-function(siteXspp){
# The total N (summed across both sites) remains the same, but total S observed at each site
# is allowed to differ due to the species-level randomizations. eg. some species will now be 0.
#Create an output matrix
out<-matrix(nrow=nrow(siteXspp),ncol=ncol(siteXspp))
#Draw new abundance distribution
for (x in 1:ncol(siteXspp)){
totalN<-sum(siteXspp[,x])
N1<-sample(0:totalN,1)    #changed 0:totalN, instead of 1:totalN
N2<-totalN - N1
out[,x]<-c(N1,N2)
}
#Compute difference in evenness
#calculate J for each community, and the bray-curtis dissimilarity among the simulated sites
Dboth = diversity(out, index = 'invsimpson')
Jboth_sim = Dboth / specnumber(out)
Tstar<-BCdist(matrix(c(Jboth_sim[1], Jboth_sim[2]), nrow = 1, ncol = 2)) #OBSERVED: Bray-curtis difference in Simpson's evenness (J)
return(Tstar)
}
NullCommunityBC<-function(siteXspp, num){
# input paired communities in site x species matrix, run randomization test
# to determine if difference in N is > than expected by random
# randomizes the abundance of each species in the paired communities, while still assuming
# that the total number of individuals within each specis was observed. Note that this may also
# change observed S for each site and/or form of abundance distribution (not analyzed here).
#count N for each comm, calculate different in N
Tstar_obs <- vegdist(siteXspp, method = "bray") #OBSERVED: bray-curtis similarity sitionin composition
#replicate null distribution, decide the number of randomizations n=X
nullDistribution<-replicate(n=num,expr=nullBCcomp(siteXspp))
#Find quantile of the null distribution for the observed test statistic
quant<-ecdf(nullDistribution) (Tstar_obs)
#output the quantile
if(quant > .95 | quant < .05) {decision<-"Sign."}
else { decision <- "Random"}
#if(quant < .95 & quant > .05) {decision<-"Random"}
return(decision)
}
NullCommunityN<-function(siteXspp, num){
# input paired communities in site x species matrix, run randomization test
# to determine if difference in N is > than expected by random
# randomizes the abundance of each species in the paired communities, while still assuming
# that the total number of individuals within each species was observed. Note that this may also
# change observed S for each site and/or form of abundance distribution (not analyzed here).
#count N for each comm, calculate different in N
Nboth_obs<-rowSums(siteXspp)
Tstar_obs<-Nboth_obs[[1]] - Nboth_obs[[2]] #OBSERVED: control N - manipulated N
#replicate null distribution, decide the number of randomizations n=X
nullDistribution<-replicate(n=num,expr=nullN(siteXspp))
#Find quantile of the null distribution for the observed test statistic
quant<-ecdf(nullDistribution) (Tstar_obs)
#output the quantile
if(quant > .95 | quant < .05) {decision<-"Sign."}
else { decision <- "Random"}
#if(quant < .95 & quant > .05) {decision<-"Random"}
return(decision)
}
NullCommunityS<-function(siteXspp, num){
# input paired communities in site x species matrix, run randomization test
# to determine if difference in S is > than expected by random
# randomizes the abundance of each species in the paired communities, while still assuming
# that the total number of individuals within each community was observed.
# Note that this may also change observed form of abundance distribution (not analyzed here).
#count S for each comm, calculate different in S
Sboth_obs = specnumber(siteXspp)
Tstar_obs<-Sboth_obs[[1]] - Sboth_obs[[2]] #OBSERVED: control S - manipulated S
#replicate null distribution, decide the number of randomizations n=X
nullDistribution<-replicate(n=num,expr=nullS(siteXspp))
#Find quantile of the null distribution for the observed test statistic
quant<-ecdf(nullDistribution) (Tstar_obs)
#output the quantile
if(quant > .95 | quant < .05) {decision<-"Sign."}
else { decision <- "Random"}
#if(quant < .95 & quant > .05) {decision<-"Random"}
return(decision)
}
NullCommunityJ<-function(siteXspp, num){
# input paired communities in site x species matrix, run randomization test
# to determine if difference in S is > than expected by random
# randomizes the abundance of each species in the paired communities, while still assuming
# that the total number of individuals within each community was observed.
# Note that this may also change observed form of abundance distribution (not analyzed here).
#get evenness for both communities, calculate difference in evenness
Dboth = diversity(siteXspp, index = 'invsimpson')
Jboth_obs = Dboth / specnumber(siteXspp)
Tstar_obs<-BCdist(matrix(c(Jboth_obs[1], Jboth_obs[2]), nrow = 1, ncol = 2)) #OBSERVED: Bray-curtis difference in Simpson's evenness (J)
#replicate null distribution, decide the number of randomizations n=X
nullDistribution<-replicate(n=num,expr=nullJ(siteXspp))
#Find quantile of the null distribution for the observed test statistic
quant<-ecdf(nullDistribution) (Tstar_obs)
#output the quantile
if(quant > .95 | quant < .05) {decision<-"Sign."}
else { decision <- "Random"}
#if(quant < .95 & quant > .05) {decision<-"Random"}
return(decision)
}
#------null modeling results
BCnull = c()
Nnull = c()
Snull = c()
Jnull = c()
RADnull = c()
for (iRow in 1:nrow(comps)){
control = comps[iRow,2]  #find control in pair
experiment = comps[iRow,3]  # find experiment in pair
# Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
a1 = sort(as.numeric(comms[which(comms[,2] == control & comms[,7] != 0), 8])) #vector of control abundances
a2 = sort(as.numeric(comms[which(comms[,2] == experiment & comms[,7] != 0), 8])) #vector of exp abundances
# Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(a1) > 4 & length(a2) > 4 & sum(a1) > 29 & sum(a2) > 29){
comparison = subset(comms[which(comms$siteID == control | comms$siteID == experiment),])
comparison$spname = paste(comparison$genus, comparison$species, sep="_")
comparison$grp = as.numeric(comparison$siteID==control) #control site == 1, make sure to order comparisons, control[1,], experiment[2,]
data = comparison[,c(2,8,9,10)]
sitexsp <- cast(data, grp + siteID  ~ spname, value = "abundance", fun = mean)
sitexsp[is.na(sitexsp)] <- 0
sitexsp = arrange(sitexsp, desc(grp))
BCresult = NullCommunityBC(sitexsp[,-c(1,2)], 100)
BCnull = append(BCnull, BCresult)
Nresult = NullCommunityN(sitexsp[,-c(1,2)], 100)
Nnull = append(Nnull, Nresult)
Sresult = NullCommunityS(sitexsp[,-c(1,2)], 100)
Snull = append(Snull, Sresult)
Jresult = NullCommunityJ(sitexsp[,-c(1,2)], 100)
Jnull = append(Jnull, Jresult)
}}}
siteXspp
dat
m = mean(dat)
sd = sd(dat)
samp = rlnorm(length(dat, m, sd))
help(rlnorm)
samp = rlnorm(length(dat), m, sd))
samp = rlnorm(length(dat), m, sd)
samp
sum(samp)
m
sd
samp = floor(samp)
samp
hist(samp)
length(samp)
length(dat)
int(samp)
samp = rlnorm(length(dat), log(m), log(sd))
samp
sum(samp)
sum(dat)
