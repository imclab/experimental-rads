BCrad = append(BCrad, BCdist(abundMerge(relabund(a1), relabund(a2))))
BCS = append(BCS, BCdist(matrix(c(length(a1), length(a2)), nrow = 1, ncol = 2)))
BCN = append(BCN, BCdist(matrix(c(sum(a1),sum(a2)), nrow = 1, ncol = 2)))
BCcomp = append(BCcomp, BCdist(subset(comms[which(comms$siteID == control | comms$siteID == experiment),])))
percS = append(percS, ((length(a2) - length(a1))/(length(a1)))*100)
percN = append(percN, ((sum(a2) - sum(a1))/(sum(a1)))*100)
taxon = append(taxon, taxa)
etype = append(etype, type)
# record summary descriptive variables
refID = append(refID, ref)
cID = append(cID, control)
eID = append(eID, experiment)
CS = append(CS, length(a1))
CN = append(CN, sum(a1))
Jc = append(Jc, round(SimpE(comms[which(comms[,2] == control),]),2))
ES = append(ES, length(a2))
EN = append(EN, sum(a2))
Je = append(Je, round(SimpE(comms[which(comms[,2] == experiment),]),2))
}}}
dev.off()
relabun_rmse = round(rmse(c,e),4)
relabun_r2 = round(rsquare(c,e),4)
relabun_rmse
relabun_r2
length(c)
length(e)
c = as.numeric()
e = as.numeric()
r2 = as.numeric()
for (iRow in 1:nrow(comps)){
control = comps[iRow,2]  #find control in pair
experiment = comps[iRow,3]  # find experiment in pair
#  taxa = as.character(comps[iRow, 4])
#  type = as.character(comps[iRow, 7])
#  refID = as.character(comps[iRow, 1])
#Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
#Get a vector of all the abundances for each species in the control and in the experimental communities
abun_control = sort(as.numeric(comms[which(comms[,2] == control & comms[,7] != 0), 8]))
abun_exprmt = sort(as.numeric(comms[which(comms[,2] == experiment & comms[,7] != 0), 8]))
#Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(abun_control) > 4 & length(abun_exprmt) > 4 & sum(abun_control) > 29 & sum(abun_exprmt) > 29){
relcon = relabund(abun_control) #make the lengths the same!
relexp = relabund(abun_exprmt)  #make the lengths the same!
comparison_matrix = abundMerge(relcon, relexp)
#add points to the open plot window
points(comparison_matrix[,1], comparison_matrix[,2], pch = 19)
c = append(c, comparison_matrix[,1])
e = append(e, comparison_matrix[,2])
r2 = append(r2, rsquare(comparison_matrix[,1], comparison_matrix[,2]))
}}}
relabun_r2 = rsquare(c, e)
relabun_rmse = rmse(e, c)
c = as.numeric()
e = as.numeric()
r2 = as.numeric()
for (iRow in 1:nrow(comps)){
control = comps[iRow,2]  #find control in pair
experiment = comps[iRow,3]  # find experiment in pair
#  taxa = as.character(comps[iRow, 4])
#  type = as.character(comps[iRow, 7])
#  refID = as.character(comps[iRow, 1])
#Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
#Get a vector of all the abundances for each species in the control and in the experimental communities
abun_control = sort(as.numeric(comms[which(comms[,2] == control & comms[,7] != 0), 8]))
abun_exprmt = sort(as.numeric(comms[which(comms[,2] == experiment & comms[,7] != 0), 8]))
#Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(abun_control) > 4 & length(abun_exprmt) > 4 & sum(abun_control) > 29 & sum(abun_exprmt) > 29){
relcon = relabund(abun_control) #make the lengths the same!
relexp = relabund(abun_exprmt)  #make the lengths the same!
comparison_matrix = abundMerge(relcon, relexp)
c = append(c, comparison_matrix[,1])
e = append(e, comparison_matrix[,2])
r2 = append(r2, rsquare(comparison_matrix[,1], comparison_matrix[,2]))
}}}
length(c)
length(e)
relcon
relabun
relexp
comparison_matrix = abundMerge(relcon, relexp)
comparison_matrix
r2 = append(r2, rsquare(comparison_matrix[,1], comparison_matrix[,2]))
r2
length(r2)
pdf("allRADs.pdf", 7, 10, paper = "letter", pointsize = 10)
par(mfrow=c(5,4), mar=c(1.5,2,3,1), oma=c(1,1,1,1))
#descriptive variables
refID = c()
cID = c()
eID = c()
Cshape = c()
Eshape = c()
CS = as.numeric()
CN = as.numeric()
Jc = as.numeric()
ES = as.numeric()
EN = as.numeric()
Je = as.numeric()
taxon = c()
etype = c()
# comparison variables
BCrad = as.numeric()
BCS = as.numeric()
BCN = as.numeric()
BCcomp = as.numeric()
percS = as.numeric()
percN = as.numeric()
c = as.numeric()
e = as.numeric()
r2 = as.numeric()
for (iRow in 1:nrow(comps)){
control = comps[iRow,2]  #find control in pair
experiment = comps[iRow,3]  # find experiment in pair
taxa = as.character(expers[which(expers[,2]==control),7])# find taxonomic group from experiments table
type = as.character(expers[which(expers[,2]==control),4]) # find experiment type from experiments table
ref = as.character(comps[iRow,1])
# Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
a1 = sort(as.numeric(comms[which(comms[,2] == control & comms[,7] != 0), 8])) #vector of control abundances
a2 = sort(as.numeric(comms[which(comms[,2] == experiment & comms[,7] != 0), 8])) #vector of exp abundances
# Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(a1) > 4 & length(a2) > 4 & sum(a1) > 29 & sum(a2) > 29){
# record all values in a comparison matrix
relcon = relabund(abun_control) #make the lengths the same!
relexp = relabund(abun_exprmt)  #make the lengths the same!
comparison_matrix = abundMerge(relcon, relexp)
c = append(c, comparison_matrix[,1])
e = append(e, comparison_matrix[,2])
r2 = append(r2, rsquare(comparison_matrix[,1], comparison_matrix[,2]))
# find categorical shapes (logseries vs. lognormal)
if(expers[which(expers[,2]==control),10] == 1) { #is it raw abundance data?
d = dist.test(a1, a2)
Cshape = append(Cshape, d$con)
Eshape = append(Eshape, d$exp)
}
else {      #if mean abundance, can't get the data, (needs integers)
Cshape = append(Cshape, "ERROR")
Eshape = append(Eshape, "ERROR")
}
#plot the compared data
RAD_plot(control, experiment, a1, a2, taxa)
# get summary statistics from comparisons
BCrad = append(BCrad, BCdist(abundMerge(relabund(a1), relabund(a2))))
BCS = append(BCS, BCdist(matrix(c(length(a1), length(a2)), nrow = 1, ncol = 2)))
BCN = append(BCN, BCdist(matrix(c(sum(a1),sum(a2)), nrow = 1, ncol = 2)))
BCcomp = append(BCcomp, BCdist(subset(comms[which(comms$siteID == control | comms$siteID == experiment),])))
percS = append(percS, ((length(a2) - length(a1))/(length(a1)))*100)
percN = append(percN, ((sum(a2) - sum(a1))/(sum(a1)))*100)
taxon = append(taxon, taxa)
etype = append(etype, type)
# record summary descriptive variables
refID = append(refID, ref)
cID = append(cID, control)
eID = append(eID, experiment)
CS = append(CS, length(a1))
CN = append(CN, sum(a1))
Jc = append(Jc, round(SimpE(comms[which(comms[,2] == control),]),2))
ES = append(ES, length(a2))
EN = append(EN, sum(a2))
Je = append(Je, round(SimpE(comms[which(comms[,2] == experiment),]),2))
}}}
dev.off()
length(r2)
length(c)
length(e)
relabun_r2 = rsquare(c, e)
relabun_rmse = rmse(e, c)
relabun_r2
relabun_rmse
c = as.numeric()
e = as.numeric()
r2 = as.numeric()
for (iRow in 1:nrow(comps)){
control = comps[iRow,2]  #find control in pair
experiment = comps[iRow,3]  # find experiment in pair
#  taxa = as.character(comps[iRow, 4])
#  type = as.character(comps[iRow, 7])
#  refID = as.character(comps[iRow, 1])
#Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
#Get a vector of all the abundances for each species in the control and in the experimental communities
abun_control = sort(as.numeric(comms[which(comms[,2] == control & comms[,7] != 0), 8]))
abun_exprmt = sort(as.numeric(comms[which(comms[,2] == experiment & comms[,7] != 0), 8]))
#Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(abun_control) > 4 & length(abun_exprmt) > 4 & sum(abun_control) > 29 & sum(abun_exprmt) > 29){
relcon = relabund(abun_control) #make the lengths the same!
relexp = relabund(abun_exprmt)  #make the lengths the same!
comparison_matrix = abundMerge(relcon, relexp)
c = append(c, comparison_matrix[,1])
e = append(e, comparison_matrix[,2])
r2 = append(r2, rsquare(comparison_matrix[,1], comparison_matrix[,2]))
}}}
relabun_r2 = rsquare(c, e)
relabun_rmse = rmse(e, c)
length(c)
3631/2
length(r2)
relabun_r2
relabun_rmse
a1
a2
length(a1) > 4 & length(a2) > 4 & sum(a1) > 29 & sum(a2) > 29
#open plotting pdf window
pdf("allRADs.pdf", 7, 10, paper = "letter", pointsize = 10)
par(mfrow=c(5,4), mar=c(1.5,2,3,1), oma=c(1,1,1,1))
#descriptive variables
refID = c()
cID = c()
eID = c()
Cshape = c()
Eshape = c()
CS = as.numeric()
CN = as.numeric()
Jc = as.numeric()
ES = as.numeric()
EN = as.numeric()
Je = as.numeric()
taxon = c()
etype = c()
# comparison variables
BCrad = as.numeric()
BCS = as.numeric()
BCN = as.numeric()
BCcomp = as.numeric()
percS = as.numeric()
percN = as.numeric()
c = as.numeric()
e = as.numeric()
r2 = as.numeric()
for (iRow in 1:nrow(comps)){
control = comps[iRow,2]  #find control in pair
experiment = comps[iRow,3]  # find experiment in pair
taxa = as.character(expers[which(expers[,2]==control),7])# find taxonomic group from experiments table
type = as.character(expers[which(expers[,2]==control),4]) # find experiment type from experiments table
ref = as.character(comps[iRow,1])
# Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
a1 = sort(as.numeric(comms[which(comms[,2] == control & comms[,7] != 0), 8])) #vector of control abundances
a2 = sort(as.numeric(comms[which(comms[,2] == experiment & comms[,7] != 0), 8])) #vector of exp abundances
# Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(a1) > 4 & length(a2) > 4 & sum(a1) > 29 & sum(a2) > 29){
# record all values in a comparison matrix
relcon = relabund(a1) #make the lengths the same!
relexp = relabund(a2)  #make the lengths the same!
comparison_matrix = abundMerge(relcon, relexp)
c = append(c, comparison_matrix[,1])
e = append(e, comparison_matrix[,2])
r2 = append(r2, rsquare(comparison_matrix[,1], comparison_matrix[,2]))
# find categorical shapes (logseries vs. lognormal)
if(expers[which(expers[,2]==control),10] == 1) { #is it raw abundance data?
d = dist.test(a1, a2)
Cshape = append(Cshape, d$con)
Eshape = append(Eshape, d$exp)
}
else {      #if mean abundance, can't get the data, (needs integers)
Cshape = append(Cshape, "ERROR")
Eshape = append(Eshape, "ERROR")
}
#plot the compared data
RAD_plot(control, experiment, a1, a2, taxa)
# get summary statistics from comparisons
BCrad = append(BCrad, BCdist(abundMerge(relabund(a1), relabund(a2))))
BCS = append(BCS, BCdist(matrix(c(length(a1), length(a2)), nrow = 1, ncol = 2)))
BCN = append(BCN, BCdist(matrix(c(sum(a1),sum(a2)), nrow = 1, ncol = 2)))
BCcomp = append(BCcomp, BCdist(subset(comms[which(comms$siteID == control | comms$siteID == experiment),])))
percS = append(percS, ((length(a2) - length(a1))/(length(a1)))*100)
percN = append(percN, ((sum(a2) - sum(a1))/(sum(a1)))*100)
taxon = append(taxon, taxa)
etype = append(etype, type)
# record summary descriptive variables
refID = append(refID, ref)
cID = append(cID, control)
eID = append(eID, experiment)
CS = append(CS, length(a1))
CN = append(CN, sum(a1))
Jc = append(Jc, round(SimpE(comms[which(comms[,2] == control),]),2))
ES = append(ES, length(a2))
EN = append(EN, sum(a2))
Je = append(Je, round(SimpE(comms[which(comms[,2] == experiment),]),2))
}}}
dev.off()
length(c)
length(e)
relabun_rmse
relabun_r2
relabun_rmse = round(rmse(e,c),4)
relabun_r2 = round(rsquare(c,e),4)
relabun_rmse
relabun_r2
stdz_bc_rad = standardize(BCrad)
stdz_bc_s = standardize(BCS)
stdz_bc_n = standardize(BCN)
stdz_perc_s = standardize(abs(percS))
stdz_perc_n = standardize(abs(percN))
stdz_bc_comp = standardize(BCcomp)
taxon = as.factor(taxon)
etype = as.factor(etype)
lm_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
r2_full = summary.lm(lm_full)$r.squared
lm_comp = lm(stdz_bc_rad ~ stdz_bc_comp)
r2_comp = summary.lm(lm_comp)$r.squared
lm_sn = lm(stdz_bc_rad ~ stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
r2_sn = summary.lm(lm_sn)$r.squared
lm_comp
r2_comp
r2_comp = round(summary.lm(lm_comp)$r.squared,4)
lm_sn = lm(stdz_bc_rad ~ stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
r2_sn = round(summary.lm(lm_sn)$r.squared,4)
r2_sn
var_comp = round(r2_full - r2_sn, 4)
var_comp
var_comp = round(summary.lm(lm_full)$r.squared - summary.lm(lm_sn)$r.squared, 4)
var_comp
var_sn = round(summary.lm(lm_full)$r.squared-summary.lm(lm_comp)$r.squared,4)
var_sn
lm_perc_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_perc_s + stdz_perc_n + stdz_perc_s:stdz_perc_n)
lm_perc_comp = lm(stdz_bc_rad ~ stdz_bc_comp)
lm_perc_sn = lm(stdz_bc_rad ~ stdz_perc_s + stdz_perc_n + stdz_perc_n:stdz_perc_s)
r2_pfull = round(summary.lm(lm_perc_full)$r.squared,4)
r2_pcomp = round(summary.lm(lm_perc_comp)$r.squared,4)
r2_perc_sn = round(summary.lm(lm_perc_sn)$r.squared,4)
var_pcomp = round(summary.lm(lm_perc_full)$r.squared - summary.lm(lm_perc_sn)$r.squared, 4)
var_psn = round(summary.lm(lm_perc_full)$r.squared-summary.lm(lm_perc_comp)$r.squared,4)
var_psn
var_pcomp
lm_perc_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_perc_s + stdz_perc_n + stdz_perc_s:stdz_perc_n + taxon)
lm_perc_comm_vars = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_perc_s + stdz_perc_n + stdz_perc_s:stdz_perc_n)
lm_perc_taxa = lm(stdz_bc_rad ~ taxon)
r2_pfull = round(summary.lm(lm_perc_full)$r.squared, 4)
r2_pcomm_vars = round(summary.lm(lm_perc_comm_vars)$r.squared, 4)
r2_ptaxa = round(summary.lm(lm_perc_taxa)$r.squared, 4)
var_pcommvars = round(summary.lm(lm_perc_full)$r.squared - summary.lm(lm_perc_taxa)$r.squared, 4)
var_ptaxa = round(summary.lm(lm_perc_full)$r.squared - summary.lm(lm_perc_comm_vars)$r.squared, 4)
lm_perc_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_perc_s + stdz_perc_n + stdz_perc_s:stdz_perc_n + etype)
lm_perc_comm_vars = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_perc_s + stdz_perc_n + stdz_perc_s:stdz_perc_n)
lm_perc_etype = lm(stdz_bc_rad ~ etype)
r2_full = round(summary.lm(lm_perc_full)$r.squared, 4)
r2_comm_vars = round(summary.lm(lm_perc_comm_vars)$r.squared, 4)
r2_etype = round(summary.lm(lm_perc_etype)$r.squared, 4)
var_pcommvars = round(summary.lm(lm_perc_full)$r.squared - summary.lm(lm_perc_etype)$r.squared, 4)
var_etype = round(summary.lm(lm_perc_full)$r.squared - summary.lm(lm_perc_comm_vars)$r.squared, 4)
lm_bc_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n + taxon)
lm_bc_comm_vars = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
lm_bc_taxa = lm(stdz_bc_rad ~ taxon)
r2_bcfull = summary.lm(lm_bc_full)$r.squared
r2_bccomm_vars = summary.lm(lm_bc_comm_vars)$r.squared
r2_bctaxa = summary.lm(lm_bc_taxa)$r.squared
var_bccommvars = round(summary.lm(lm_bc_full)$r.squared - summary.lm(lm_bc_taxa)$r.squared, 4)
var_bctaxa = round(summary.lm(lm_bc_full)$r.squared-summary.lm(lm_bc_comm_vars)$r.squared,4)
lm_bc_full = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n + etype)
lm_bc_comm_vars = lm(stdz_bc_rad ~ stdz_bc_comp + stdz_bc_s + stdz_bc_n + stdz_bc_s:stdz_bc_n)
lm_bc_etype = lm(stdz_bc_rad ~ etype)
r2_bcfull = summary.lm(lm_bc_full)$r.squared
r2_bccomm_vars = summary.lm(lm_bc_comm_vars)$r.squared
r2_bcetype = summary.lm(lm_bc_etype)$r.squared
var_bccommvars = round(summary.lm(lm_bc_full)$r.squared - summary.lm(lm_bc_etype)$r.squared, 4)
var_bcetype = round(summary.lm(lm_bc_full)$r.squared-summary.lm(lm_bc_comm_vars)$r.squared,4)
wd = "C:\Users\sarah\Documents\GitHub\experimental-rads"
wd = "C:\\Users\\sarah\\Documents\\GitHub\\experimental-rads"
setwd(wd)
source("ExpRADsFunctions.R")   #Run the code containing the functions
install.packages("vegan")
library(vegan)
install.packages("BiodiversityR")
install.packages("plotrix")
install.packages("CCA")
install.packages("lme4")
install.packages("VGAM")
install.packages("nlme")
install.packages("nlme")
install.packages("poilog")
install.packages("scatterplot3d")
isntall.packages("hydroGOF")
install.packages("hydroGOF")
install.packages("languageR")
source("ExpRADsFunctions.R")   #Run the code containing the functions
source("ExpRADsFunctions.R")   #Run the code containing the functions
install.packages("languageR")
source("ExpRADsFunctions.R")   #Run the code containing the functions
source("ExpRADsFunctions.R")   #Run the code containing the functions
comms = read.csv("community_analysis_data.csv", na.strings = 'NULL')
#comps = read.csv("comparison_analysis_data.csv") #this file is unordered. Looks less nice when plotted.
comps = read.csv("orderedcomparisons.csv")
names(comps)<-c('ref', 'controID','expID')
expers = read.csv("experiments_analysis_data.csv")
#--------------------------------------------------------------
#descriptive variables
refID = c()
cID = c()
eID = c()
Cshape = c()
Eshape = c()
CS = as.numeric()
CN = as.numeric()
Jc = as.numeric()
ES = as.numeric()
EN = as.numeric()
Je = as.numeric()
taxon = c()
etype = c()
# comparison variables
BCJ = as.numeric()
BCrad = as.numeric()
BCS = as.numeric()
BCN = as.numeric()
BCcomp = as.numeric()
percS = as.numeric()
percN = as.numeric()
c = as.numeric()
e = as.numeric()
r2 = as.numeric()
compc = as.numeric()
compe = as.numeric()
compr2 = as.numeric()
for (iRow in 1:nrow(comps)){
control = comps[iRow,2]  #find control in pair
experiment = comps[iRow,3]  # find experiment in pair
taxa = as.character(expers[which(expers[,2]==control),7])# find taxonomic group from experiments table
type = as.character(expers[which(expers[,2]==control),4]) # find experiment type from experiments table
ref = as.character(comps[iRow,1])
# Check that < 10% of individuals are unidentified. If meets criteria, continue
if (percent_unidSpp(control, comms) == "OK" & percent_unidSpp(experiment, comms) == "OK"){
a1 = sort(as.numeric(comms[which(comms[,2] == control & comms[,7] != 0), 8])) #vector of control abundances
a2 = sort(as.numeric(comms[which(comms[,2] == experiment & comms[,7] != 0), 8])) #vector of exp abundances
# Check that there are at least 5 species and 30 individuals in each community, If yes, proceed.
if (length(a1) > 4 & length(a2) > 4 & sum(a1) > 29 & sum(a2) > 29){
# record all values in a comparison matrix
relcon = relabund(a1) #make the lengths the same!
relexp = relabund(a2)  #make the lengths the same!
comparison_matrix = abundMerge(relcon, relexp)
c = append(c, comparison_matrix[,1])
e = append(e, comparison_matrix[,2])
r2 = append(r2, rsquare(comparison_matrix[,1], comparison_matrix[,2]))
# record all composition-specific values in a comparison matrix
comparison = subset(comms[which(comms$siteID == control | comms$siteID == experiment),])
comparison = reshape_data(comparison) #table species & abundance in paired communities
comparison = comparison[,c(2:ncol(comparison))]
comparison[1,] = comparison[1,]/sum(comparison[1,]) #convert to relabundance
comparison[2,] = comparison[2,]/sum(comparison[2,]) #convert to relabundance
compc = append(compc, as.numeric(comparison[1,]))
compe = append(compe, as.numeric(comparison[2,]))
compr2 = append(compr2, rsquare(as.numeric(comparison[1,]), as.numeric(comparison[2,])))
# find categorical shapes (logseries vs. lognormal)
if(expers[which(expers[,2]==control),10] == 1) { #is it raw abundance data?
d = dist.test(a1, a2)
Cshape = append(Cshape, d$con)
Eshape = append(Eshape, d$exp)
}
else {      #if mean abundance, can't get the data, (needs integers)
Cshape = append(Cshape, "ERROR")
Eshape = append(Eshape, "ERROR")
}
#plot the compared data
RAD_plot(control, experiment, a1, a2, taxa)
# descriptors
con_s = length(a1)
con_n = sum(a1)
con_j = SimpE(comms[which(comms[,2]==control),])
exp_s = length(a2)
exp_n = sum(a2)
exp_j = SimpE(comms[which(comms[,2]==experiment),])
# get summary statistics from comparisons
BCJ = append(BCJ, BCdist(matrix(c(con_j, exp_j), nrow = 1, ncol = 2)))
BCrad = append(BCrad, BCdist(abundMerge(relabund(a1), relabund(a2))))
BCS = append(BCS, BCdist(matrix(c(con_s, exp_s), nrow = 1, ncol = 2)))
BCN = append(BCN, BCdist(matrix(c(con_n, exp_n), nrow = 1, ncol = 2)))
BCcomp = append(BCcomp, BCdist(subset(comms[which(comms$siteID == control | comms$siteID == experiment),])))
percS = append(percS, ((exp_s - con_s)/con_s)*100)
percN = append(percN, ((exp_n - con_n)/con_n)*100)
taxon = append(taxon, taxa)
etype = append(etype, type)
# record summary descriptive variables
refID = append(refID, ref)
cID = append(cID, control)
eID = append(eID, experiment)
CS = append(CS, con_s)
CN = append(CN, con_n)
Jc = append(Jc, round(con_j,4))
ES = append(ES, exp_s)
EN = append(EN, exp_n)
Je = append(Je, round(exp_j,4))
}}}
changeS = CS-ES
richness = cbind(CS,ES, changeS)
richness
richness = cbind(CS,ES, changeS, percS)
richness
max(percS)
r1 = subset(richness, percS > 100)
r2
r1
hist(percS)
richness = cbind(cID, eID, percS)
r1 = subset(richness, percS > 100)
richness
r1
r1 = subset(richness, CS, ES, percS > 100)
richness = cbind(cID, eID, CS, ES, percS)
r1 = subset(richness,percS > 100)
r1
length(CS)
length(ES)
length(percS)
richness = cbind(cID, eID, CS,ES, changeS, percS)
r1 = subset(richness,percS > 100)
r3 = subset(richness, percS <=50)
r3
r3 = subset(richness, percS <=-50)
r3
r1
